<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/activity_main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="fingertip.creditease.com.testdrawable.MainActivity">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <ImageView
            android:background="@color/colorAccent"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:onClick="onTest"
            android:padding="100dp"
            android:src="@drawable/good_pb_t" />
<!--5.0后开始-->
        <ImageView
            android:layout_width="match_parent"
            android:layout_height="200dp"
            android:background="@android:color/holo_green_dark"
            android:src="@drawable/inset" />
<!--使用clip标签可以对drawable进行裁剪，在做进度条时很有用。通过设置level值控制裁剪多少，level取值范围为0~10000，默认为0，表示完全裁剪，图片将不可见；10000则完全不裁剪，可见完整图片。看看clip标签可以设置的属性：-->
        <ImageView
            android:id="@+id/test_clip"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="@color/colorAccent"
            android:src="@drawable/clip" />
        <!--使用scale标签可以对drawable进行缩放操作，和clip一样是通过设置level来控制缩放的比例。scale标签可以设置的属性如下：-->
        <ImageView
            android:id="@+id/scale"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@android:color/holo_green_dark"
            android:src="@drawable/scale" />
        <!--当需要在一个View中显示不同图片的时候，比如手机剩余电量不同时显示的图片不同，level-list就可以派上用场了。level-list可以管理一组drawable，每个drawable设置一组level范围，最终会根据level值选取对应的drawable绘制出来。level-list通过添加item子标签来添加相应的drawable，其下的item只有三个属性：-->
        <ImageView
            android:onClick="testLevelList"
            android:id="@+id/level_list"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@color/colorAccent"
            android:src="@drawable/level_list" />
        <!--transition其实是继承自layer-list的，只是，transition只能管理两层drawable，另外提供了两层drawable之间切换的方法，切换时还会有淡入淡出的动画效果-->
        <ImageView
            android:onClick="testTransition"
            android:id="@+id/tansition"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@android:color/holo_green_dark"
            android:src="@drawable/transition" />

        <ImageView
            android:onClick="testRotate"
            android:id="@+id/rotate"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@color/colorAccent"
            android:src="@drawable/rotate" />
        <!--通过animation-list可以将一系列drawable构建成帧动画，就是将一个个drawable，一帧一帧的播放。通过添加item子标签设置每一帧使用的drawable资源，以及每一帧持续的时间-->
        <ImageView
            android:onClick="testAnimationList"
            android:id="@+id/animation_list"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@android:color/holo_green_dark"
            android:src="@drawable/animation_list" />

        <!--rotate标签只是将原有的drawable转个角度变成另一个drawable，它是静态的。而animated-rotate则会让drawable不停地做旋转动画。
animated-rotate可设置的属性只有四个：-->
        <ImageView
            android:onClick="testAnimatedRoated"
            android:id="@+id/testAnimatedRoated"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@android:color/holo_green_dark"
            android:src="@drawable/animated_rotated" />
        <ImageView
            android:src="@drawable/layer"
            android:layout_width="match_parent"
            android:layout_height="wrap_content" />
        <TextView
            android:onClick="testhtml"
              android:text="@string/welcome_messages"
            android:textColor="@color/colorPrimary"
            android:layout_width="match_parent"
            android:layout_height="match_parent" />
    </LinearLayout>
</ScrollView>
